#!/bin/sh
#-
# Copyright (c) 2013 Nathan Whitehorn
# Copyright (c) 2013-2015 Devin Teske
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# $FreeBSD$
#
############################################################ INCLUDES

BSDCFG_SHARE="/usr/share/bsdconfig"
. $BSDCFG_SHARE/common.subr || exit 1
f_dprintf "%s: loading includes..." "$0"
f_include $BSDCFG_SHARE/variable.subr #TODO figure out what this is

############################################################ CONFIGURATION

# VARIABLES:
# PARTITIONS
# DISTRIBUTIONS
# BSDINSTALL_DISTDIR

#
# Default name of the ZFS boot-pool
#
: ${ZFSBOOT_POOL_NAME:=zroot}

: ${TMPDIR="/tmp"}; export TMPDIR

: ${BSDINSTALL_TMPETC="${TMPDIR}/bsdinstall_etc"}; export BSDINSTALL_TMPETC
: ${BSDINSTALL_TMPBOOT="${TMPDIR}/bsdinstall_boot"}; export BSDINSTALL_TMPBOOT
: ${PATH_FSTAB="$BSDINSTALL_TMPETC/fstab"}; export PATH_FSTAB
: ${BSDINSTALL_DISTDIR="/usr/freebsd-dist"}; export BSDINSTALL_DISTDIR
: ${BSDINSTALL_CHROOT="/mnt"}; export BSDINSTALL_CHROOT

############################################################ GLOBALS


#
# Strings that should be moved to an i18n file and loaded with f_include_lang()
#
msg_installation_error="Installation Error!"

############################################################ FUNCTIONS

error()
{
	[ -f "$PATH_FSTAB" ] || exit
	if [ "$ZFSBOOT_DISKS" ]; then
		zpool export $ZFSBOOT_POOL_NAME
	else
		bsdinstall umount
	fi

	exit 1
}

############################################################ MAIN

set -e
trap error EXIT

SCRIPT="$1"
shift

f_dprintf "Began Installation at %s" "$( date )"
rm -rf $BSDINSTALL_TMPETC
mkdir $BSDINSTALL_TMPETC

split -a 2 -p '^#!.*' "$SCRIPT" $TMPDIR/bsdinstall-installscript-

. $TMPDIR/bsdinstall-installscript-aa
: ${DISTRIBUTIONS="kernel.txz base.txz"}; export DISTRIBUTIONS
export BSDINSTALL_DISTDIR

# Re-initialize a new log if preamble changed BSDINSTALL_LOG
if [ "$BSDINSTALL_LOG" != "${debugFile#+}" ]; then
	export debugFile="$BSDINSTALL_LOG"
	f_quietly f_debug_init
	# NB: Being scripted, let debug go to terminal for invalid debugFile
	f_dprintf "Began Installation at %s" "$( date )"
fi

# Make partitions
rm -f $PATH_FSTAB
touch $PATH_FSTAB
if [ "$ZFSBOOT_DISKS" ]; then
	bsdinstall zfsboot
else
	bsdinstall scriptedpart "$PARTITIONS"
fi
bsdinstall mount

fetch --output=/usr/share/keys/pkg/trusted/alpha.pkgbase.live.pub https://alpha.pkgbase.live/alpha.pkgbase.live.pub

# pkg -o ASSUME_ALWAYS_YES=yes -r ${BSDINSTALL_CHROOT} update </dev/null

pkg_install() {
       pkg -o ASSUME_ALWAYS_YES=yes -r ${BSDINSTALL_CHROOT} install ${pkg_list} </dev/null
}

for feature in $PACKAGES; do
        if [ "${feature}" == "base" ]; then
                install_base=yes
        fi
        if [ "${feature}" == "kernel" ]; then
                install_kernel=yes
        fi
	if [ "${feature}" == "lib32" ]; then
                install_lib32=yes
        fi
        if [ "${feature}" == "debug" ]; then
                install_debug=yes
        fi
        if [ "${feature}" == "development" ]; then
                install_development=yes
        fi
done

if [ "${install_base}" == "yes" ]; then
        pkg_list=$(pkg -o ASSUME_ALWAYS_YES=yes -r ${BSDINSTALL_CHROOT} search -g 'FreeBSD-*' </dev/null | grep -vE "\-kernel|\-lib32|\-dbg|\-dev" | awk '{print $1}')
        pkg_install "Base"
fi

if [ "${install_kernel}" == "yes" ]; then
        if [ "${install_debug}" == "yes" ]; then
                pkg_list=$(pkg -o ASSUME_ALWAYS_YES=yes -r ${BSDINSTALL_CHROOT} search -g 'FreeBSD-kernel-*' </dev/null | awk '{print $1}')
        else
                pkg_list=$(pkg -o ASSUME_ALWAYS_YES=yes -r ${BSDINSTALL_CHROOT} search -g 'FreeBSD-kernel-*' </dev/null | grep -vE "\-dbg" | awk '{print $1}')
                pkg_install "kernel"
        fi
fi

if [ "${install_lib32}" == "yes" ]; then
        pkg_list=$(pkg -o ASSUME_ALWAYS_YES=yes -r ${BSDINSTALL_CHROOT} search -g 'FreeBSD-*-lib32-*' </dev/null | grep -vE "\-dbg|\-dev" | awk '{print $1}')
        pkg_install "lib32"
fi

if [ "${install_debug}" == "yes" ]; then
        if [ "${install_lib32}" == "yes" ]; then
                mod="\-dev"
        else
                mod="\-lib32|\-dev"
        fi
        pkg_list=$(pkg -o ASSUME_ALWAYS_YES=yes -r ${BSDINSTALL_CHROOT} search -g 'FreeBSD-*-dbg-*' </dev/null | grep -vE "${mod}" | awk '{print $1}')
        pkg_install "debug"
fi

if [ "${install_development}" == "yes" ]; then
        if [ "${install_lib32}" == "yes" ]; then
                mod="\-dbg"
        else
                mod="\-lib32|\-dbg"
        fi
        pkg_list=$(pkg -o ASSUME_ALWAYS_YES=yes -r ${BSDINSTALL_CHROOT} search -g 'FreeBSD-*-dev-*' </dev/null | grep -vE "${mod}" | awk '{print $1}')
        pkg_install "development"
fi

pkg_list=$OTHER_PACKAGES
pkg_install "other"

# Configure bootloader if needed
bsdinstall bootconfig

# Finalize install
bsdinstall config

# Make sure networking is functional, if we can arrange that
if [ ! -f $BSDINSTALL_CHROOT/etc/resolv.conf -a -f /etc/resolv.conf ]; then
	cp /etc/resolv.conf $BSDINSTALL_CHROOT/etc/resolv.conf
fi

# Run post-install script
if [ -f $TMPDIR/bsdinstall-installscript-ab ]; then
	cp $TMPDIR/bsdinstall-installscript-ab $BSDINSTALL_CHROOT/tmp/installscript
	chmod a+x $BSDINSTALL_CHROOT/tmp/installscript
	chroot $BSDINSTALL_CHROOT /tmp/installscript $@ 2>&1
	rm $BSDINSTALL_CHROOT/tmp/installscript
fi

bsdinstall entropy
#if [ "$ZFSBOOT_DISKS" ]; then
#	zpool export $ZFSBOOT_POOL_NAME
#else
#	bsdinstall umount
#fi

f_dprintf "Installation Completed at %s" "$( date )"

trap - EXIT
exit $SUCCESS

################################################################################
# END
################################################################################
